//reserved Keyword
$

//show all Databases:
show dbs

//show all collection
show collection

//create Database
use employee

//create collection in db:
db.Collection_name

//switched to checkout:
use db_name

//show standing database name:
db

//insert one doc:
db.Collection_name.insertOne({name:"Ram",age:19})

//show all doc of collection:
db.Collection_name.find()

//update or create nested field in one doc:
db.Collection_name.updateOne({name:"Ram"},{$set:{idcards:{hasPan:false,hasAdhar:true}}})

//find one doc:
db.Collection_name.findOne({name:"Ram"})

//update or create nested field in All doc:
db.Collection_name.updateMany({},{$set:{Hobiies:["Anime","Cooking"]}})

//find nested field doc
db.Collection_name.find({Hobiies:"Anime"})

//search nested doc
db.Collection_name.find({"idcards.hasAdhar":true})

//Create operation
insertOne()
insertMany()

//Read operation
find()
findOne()

//update operation
updateOne()
updateMany()
replaceOne()

//Delete operation
deleteOne()
deleteMany()

//find all students with age less than 12 
db.Collection_name.find({age:{$lt:12}})

//find all students with age 12 or less
db.Collection_name.find({age:{$lte:12}})

//find all students with age greater than 12 
db.Collection_name.find({age:{$gt:12}})

//find all students with age 12 or greater
db.Collection_name.find({age:{$gte:12}})

//find students between 5 to 12
db.Collection_name.find({age:{$gt:5,$lt:12}})

//search all doc records in collection
db.Collection_name.find().toArray()

//Insert one doc in collection.
db.Collection_name.insert({name:"RAM",age:12})

//Insert One doc in collection.
db.Collection_name.insertOne({name:"Om",age:20})

//Insert Many doc in collection.
db.Collection_name.insertMany([{name:"shyam",age:15},{name:"guru",age:90}])

//update/set new value or insert new value.
db.Collection_name.updateOne({age:15},{$set:{age:25}})

//update/set new value or insert new section in doc. 
db.Collection_name.updateMany({age:{$lte:17}},{$set:{isEligible:true}})

//delete many doc.
db.Collection_name.deleteMany({age:15})

//delete one doc.
db.Collection_name.deleteOne({name:"Ramu"})

//delete all doc.
db.Collection_name.deleteMany({})
 
//find Only name between name and id of collection
db.Collection_name.find({},{name:1})

//find Only name and not _id of collection.
db.Collection_name.find({},{name:1,_id:0})

//DataType
db.Collection_name.insertOne({name:"TCS",isFunded:true,Funding:1200000,employee:[{name:"OM",age:12}],date:new Date(),Time:new Timestamp()})
"TCS" - text;
true - boolean;
12000000 - number (64 bit,32 bit,decimal);
array - employee;
Embeded nested doc;
time - Time;
Date - Date;

//Delete Database
db.dropDatabase()

//delete One collection
db.Collection_name.drop()

//insert Many doc in collections
db.Collection_name.insertMany([{name:"A",price:1},{name:"B",price:2},{name:"C",price:3}])

//insert Many doc in collections with diff _id
db.Collection_name.insertMany([{_id:"A",name:"A",price:1},{_id:"B",name:"B",price:2},{_id:"C",name:"C",price:3}])

//insert doc using options when one doc _id is already exist in collections
db.Collection_name.insertMany([{_id:"AA",name:"AA",price:11},{_id:"A",name:"A",price:22},{name:"GG",price:33}],{ordered:false})

//set _id and use of options
db.Collection_name.insertMany([_id:"A",name:"A"],{ordered:false})

//to create collection without inserting doc
db.createCollection("Collection_name")

//Write Concern Specification
db.Collection_name.insertOne({name:"A",price:1},{writeConcern:{w:0,j:false,wtimeout:0}})

(mongoimport), Large Json File import in MongoDB Database (mongoimport) -
Copy File Path then open cmd Type Following Line.
(1) Type "mongoimport". 
(2) then, "paste the copy path in Double Cotation".
(3) then, type "'\'file name".
(4) then, type -d for Database_name.
(5) then, -c for Collection_name.
(6) then, --jsonArray. 
(7) then Print Enter Keyword. 
(8) Open Mongosh. 
(9) The Data Has Been Stored in Selected Database and Collections.

//Comparison Operators.
(1) $eq - Equal
db.Collection_name.find({doc_name:{$eq:Filter}}) -
- $eq Operator Find all Doc that Equal to the Given Filter.

(2) $ne - Not Equal
db.Collection_name.find({doc_name:{$ne:Filter}}) -
- $ne Operator Find all Doc that not Equal to the Given Filter. 

(3) $gt - Greater than
db.Collection_name.find({doc_name:{$gt:Filter}}) -
- $gt Operator Find all Doc that is Greater than to the Given Filter.

(4) $gte - Greater than Equal to
db.Collection_name.find({doc_name:{$gte:Filter}}) -
- $gte Operator Find all Doc that is Greater than Equal to the Given Filter.

(5) $lt - Less than
db.Collection_name.find({doc_name:{$lt:Filter}}) -
- $lt Operator Find all Doc that is Less Than to the Given  Filter.

(6) $lte - Less than Equal to
db.Collection_name.find({doc_name:{$lte:Filter}}) -
- $lte Operator Find all Doc that is Less Than Equal to the Given Filter.

(7) $in - in
db.Collection_name.find({doc_name:{$in:[Filter,Filter]}}) -
- $in Operator Find all Doc that is Equal to Given Filter in List.

(8) $nin - Not in
db.Collection_name.find({doc_name:{$nin:[Filter,Filter]}}) -
- $nin Operator Find all Doc that is Not Equal too Given Filter in List.

//Find doc.
db.Collection_name.find({doc_name:"Filter name"})

//Find nested Doc.
db.Collection_name.find({"doc_name.nested_doc_name":Filter})

//Logical Operator -
(1) $or - 
db.Collection_name.find({$or:[ {doc_name:{$gte:Filter}}, {doc_name:{$lte:Filter}} ]})

(2) $nor - 
db.Collection_name.find({$nor:[ {doc_name:{$gte:Filter}}, {doc_name:{$lte:Filter}} ]})

(3) $and -
db.Collection_name.find({$and:[ {doc_name:{$lte:Filter}} ,{doc_name:{doc_name:Filter}} ]})

//Element Queary Operator -
(1) $exist - the doc exist or not in collections.
db.Collection_name.find({doc_name:{$exist: true}})

(2) $type - Which type of the doc in collections. (ex. "String","boolean")
db.Collection_name.find({doc_name:{$type: 8}})   //8 means boolean in numbers.

//Evaluation Operators -
(1) $expr -  Allows use of Aggregation Expression Within the Queary Language.

db.Collection_name.find({
    $expr:{
        $gt: ["$field","$field2"]
    }
})

db.Collection_name.find({
    $expr:{
        $gt: ["$price", {$avg: "$price"}]
    }
})

(2) $regex - Select Values Where Documents Match a Specific Regular Expression.

db.Collection_name.find({doc_name: {$regex: /^A/}})    //find all doc that name start with 'A'.

(3) $text - Performs text search.
 
createIndex - 
db.Collection_name.createIndex({doc_name: "text"})

db.Collection_name.find({$text: {$search: "Filter"}})

(4) $mod - Performs a Modulo operation on the value of a field and Selects Documents with a Specific results.

db.Collection_name.find({doc_name:{$mod:[2,0]}})   //.find({age:{$mod:[2,0]}})  for even Age 
db.Collection_name.find({doc_name:{$mod:[2,1]}})   //.find({age:{$mod:[2,1]}})  for odd Age 

//Find Document in Json Array String.
db.Collection_name.find({doc_name:"Filter"})   //doc_name:Hobbies,Filter:"Reading".

//Find Nested Doc (Array of Objects).
db.Collection_name.find({"doc_name.nested_doc_name" : "Fileter"})    //.find({"experience.company":"Amazone"})

//Find How Many Students in nested doc.
db.Collection_name.find({"doc_name.nested_doc_name" : "Filter"}).count()    //.find({"experience.company":"Amazone"}).count()

//Find How many Students Work in 3 Companys.
db.Collection_name.find({doc_name : {$size : 3}})        //.find({experience : {$size :3}})

//Find How Many Students Hobbies are Wlaking And Reading.
db.Collection_name.find({Hobbies :{$all:["Walking","Reading"]}})       //Using of $all Operator it find all doc that filter alternate.

//Find Doc that have atleast a product that name is apple and quantity is 15.
db.Collection_name.find({products:{$elemMatch : {name:"apple", quantity:{$gte:15}}}})

//Sort Documents  -  1 for Accending, -1 for Deccending.
db.Collection_name.find().sort({doc_name : 1})    //.sort({age : 1})

db.Collection_name.find().sort({doc_name : -1})    //.sort({age : -1})

db.Collection_name.find().sort({doc_name : 1}).skip(2)    //skip first 2 doc.

db.Collection_name.find().sort({doc_name : -1}).limit(2)     //Find Only 2 Document.

//Increase age by 2 of All Students.
db.Collection_name.updateMany({},{$inc:{age:2}})      //$inc - Operator

//Set Sita age for 50 if her age is minimum that it.
db.Collection_name.updateOne({name:"SITA"},{$max:{age:50}})        //$max - maximum.

//Set Sita age for 20 if her age is maximum that it.
db.Collection_name.updateOne({name:"SITA"},{$min:{age:20}})       //$min - minimum.

//Double the age of sita.
db.Collection_name.updateOne({name:"SITA"},{$mul:{age:2}})    //$mul - multiplication.

//for Removing doc age.
db.Collection_name.updateMany({$unset:{age:23473}})      //$unset - unset(Remove).

//For Changing the doc name.
db.Collection_name.updateMany({},{$rename:{age:"StudentAge"}})    //$rename - Rename.

//Insert Value or doc When they are not in Collections.
db.Collection_name.updateOne({name:"GOLU"},{$set:{age:100}},{upsert:true})

//Add neglect : 1 where students experience is below 1.
db.Collection_name.updateMany({experience:{$elemMatch:{$lte:1}}},{$set:{"experience.$.neglect": 1}})

//Add experience.
db.Collection_name.updateOne({name:"Ram"},{$push:{experience:{company:"Meta",duration:2.5}}})

//Add experience if already added then dont.
db.Collection_name.updateOne({name:"Ram"},{$addtoset:{experience:{company:"Meta",duration:2.5}}})

//Remove latest Last doc.
db.Collection_name.updateOne({name:"RAM"},{$pop:{experience:1}})

//Remove First doc.
db.Collection_name.updateOne({name:"RAM"},{$pop:{experience:-1}})

//Explain All the Query with Collection Scan, Filter, Direction.
db.data.find({age:{$lte:30}}).explain()

db.data.find({age:{$lte:30}}).explain("executionStats")

Type of Indexes in MongoDB.
(1) Single Field Indexes.
(2) Compound Indexes.
(3) Text Indexes.

(1) Single Field Indexes - 
//Create Index For age Filed.
db.data.createIndex({"age":1})        //for Accending (1).
db.data.createIndex({"age":-1})        //for Decending (-1).

//For Scan or See Get Index.
db.data.getIndexes()

//For Delete Index.
db.data.dropIndex("age_1")

(2) Compound Indexes -
db.data.createIndex({"age":1,"gender":1})  

//For Scan or See Get Index.
db.data.find({age:{$gte:30},gender:"male"}).explain("executionStats")
                               or
db.data.find({age:{$gte:30}}).explain("executionStats") 

//No Two Doc Have Same Name.
db.data.createIndex({"age":1}, {unique:true})

//For searching doc line by one Word.
db.data.createIndex({bio:"text"})
db.data.find({$text:{$search:"savage"}})

//For Scoring Doc.
db.data.find({$text:{$search:"savage"}},{hamaraScore:{$meta:"textScore"}})

Aggregate Guide:

//Search All Female Teachers.
db.teachers.aggregate( [ { $match: {gender:"female"} } ] )         //Find All (Gender:"Female") Doc. 

//Search All Male Teachers.
db.teachers.aggregate( [ { $match: {gender:"male"} } ] )         //Find All (Gender:"male") Doc. 

//Group Teachers by Age.
db.teachers.aggregate( [ { $group: { _id: "$age " } } ] )          //Each Doc have Separate Group.

//Group teachers by age and show all teachers names per age group.
db.teachers.aggregate( [ { $group: { _id: "$age" , name: { $push: "$name" } } } ] )       

//Show all Doc That Separated By Group.
db.teachers.aggregate( [ { $group: { _id: "$age" , pooraDoc: { $push: "$$ROOT" }}} ]  )

//Give a Count per age of male Teachers.
db.teachers.aggregate( [ { $match: { gender: "male" } },{ $group: { _id: "$age", count: { $sum:1 } }} ] )

//Give a count per age of male Teachers and sort them by count in desc order.
db.teachers.aggregate( [ { $match: { gender: "male" } },{ $group: { _id: "$age" ,count: { $sum:1 } } } ] ).sort( { count:-1 } )

//Find Hobbies Per Age group.
db.teachers.aggregate( [ { unwind: "$Hobbies" },{ $group: { _id: "$Hobbies" } } ] )

//Find Average age of all Doc.
db.teachers.aggregate( [ { $group: { _id:null , average: { $avg: "$age" } } } ] ) 

// $buckets  -

//Categories Male teachers based on their ages into three buckets.
        //age less than 30.
        //age between 31 to 40.
        //age greater than 40.
db.teachers.aggregate([{$match:{gender:"male"}},{$bucket:{groupBy:"$age",boundaries:[30,35,40],default:"Greater than 40",output:{count:{$sum:1}}}}])

//Categories Male teachers based on their ages into three buckets.
        //age less than 30.
        //age between 31 to 40.
        //age greater than 40.  
        Also Show their names.
db.teachers.aggregate([{$match:{gender:"male"}},{$bucket:{groupBy:"$age",boundaries:[30,35,40],default:"Greater Than 40",output:{count:{$sum:1},names:{$push:"$name"}}}}])

